# Nghiên cứu về OpenVswitch

 - Open vSwitch (OVS) là là một multilayer switch dưới dạng phần mềm được cấp phép theo giấy phép mã nguồn mở Apache 2.0. Mục tiêu của OVS là xây dựng một nền tảng switch chất lượng cao trong công nghiệp hỗ trợ các giao diện quản lý tiêu chuẩn vàcác chức năng truyền tải có thể điều khiển bằng lập trình.

 - OVS được thiết kế sao cho phù hợp để hoạt động như một switch ảo trong môi trường Virtual Machine (VM). Ngoài việc trực quan hóa các giao diện quản lý và các lớp mạng ảo, OVS còn tương thích với nhiều phiên bản của máy chủ vật lý, công nghệ ảo hóa như Linux-based, Xen/XenServer, KVM và VirtualBox.
  
  ![alt text](../image/OVS.webp)

## 1. Kiến trúc tổng quan của OpenVswitch
  
  ![alt text](../image/OVS1.jpg)

Open vSwitch thường được sử dụng để kết nối các VMs/containers trong một host. Ví dụ như trên OpenStack compute node, nó được sử dụng với vai trò là integration bridge để kết nối các VMs chạy trên Compute node đó. Nó quản lý cả các port vật lý (eth0, eth1) và các port ảo (ví dụ như tap port của các VMs). Ba khối thành phần chính của Open vSwitch được mô tả như trên hình: 
  
 - vswitchd:

     + Là ovs daemon chạy trên user space

     + Công cụ tương tác: ovs-dpctl, ovs-appctl, ovs-ofctl, sFlowTrend 

 - ovsdb-server:

     + Là database server của Open vSwitch chạy trên user space

     + Công cụ tương tác: ovs-vsctl, ovsdb-client

 - kernel module (datapath):
    
     + Là module thuộc kernel space, thực hiện công việc chuyển tiếp gói tin

## 2. Kiến trúc chi tiết của OpenVswitch

  ![alt text](../image/OVS2.png)

 - ovs-vswitchd là tiến trình daemon chính của Open vSwitch chạy trong userspace. Nó nhận cấu hình từ ovsdb-server thông qua giao thức JSON-RPC (IPC dùng Unix domain socket), sau đó xử lý và ánh xạ cấu hình đó xuống kernel thông qua Netlink. Các bridge được quản lý như những instance của thư viện ofproto, và ovs-vswitchd lập trình các flow vào datapath trong kernel. Nó cũng thu thập thống kê và trạng thái từ datapath.
   
  ![alt text](../image/vswitchd_ovsdb_ofproto.png)

 - Nếu như những cấu hình tạm thời ví dụ như flows được lưu trong datapath và vswitchd thì các cấu hình bền vững sẽ được lưu trữ trong ovsdb và vẫn lưu giữ khi sau khi khởi động lại hệ thống. Các cấu hình này bao gồm cấu hình về bridge, port, interface, địa chỉ của OpenFlow controller nếu sử dụng  

 - datapath: Module chính chịu trách nhiệm chuyển tiếp gói tin trong Open vswitch, triển khai trong kernel space nhằm mục đích đạt hiệu năng cao. Nó caches lại OpenFlow flows và thực thi các action trên các gói tin nhận được nếu các gói tin nó match với một flow đã tồn tại. Nếu gói tin không khớp với bất kì flow nào thì gói tin sẽ được chuyển lên ovs-vswitchd. Nếu flow matching tại vswitchd thành công thì nó sẽ gửi gói tin lại cho kernel datapath kèm theo các action tương ứng để xử lý gói tin đồng thời thực hiện cache lại flow đó vào datapath để datapath xử lý những gói tin cùng loại đến tiếp sau. Hiệu năng cao đạt được ở đây là vì thực tế hầu hết các gói tin sẽ match flows thành công tại datapath và do đó sẽ được xử lý trực tiếp tại kernelspace.

## 3. Xử lý gói tin của Open vSwitch

  ![alt text](../image/ovs_packet_flow.jpg)

 - Open vSwitch là một phần mềm switch hỗ trợ OpenFlow

 - OpenFlow controller chịu trách nhiệm hướng dẫn cho datapath biết làm sao xử lý các loại gói khác nhau, hay còn gọi là flows. Một flow mô tả hành động mà datapath thực hiện để xử lý các gói tin của cùng một loại như thế nào, hay còn được gọi là action. Các kiểu hành động bao gồm chuyển tiếp tới port khác, thay đổi vlan tag,... Quá trình tìm kiếm flow khớp với gói tin nhận được gọi là flow matching. Nhằm mục đích đạt hiệu năng tốt, một phần của flows được cache trong datapath, và phần còn lại ở vswitchd.

 - Một gói tin đi vào Open vSwitch datapath sau khi nó được nhận trên một card mạng. Nếu gói tin khớp với flow nào đó trong datapath thì datapath sẽ thực thi các actions tương ứng mô tả trong flow entry. Nếu không (flow missing), datapath sẽ gửi gói tin lên ovs-vswitchd và tiến trình flow-matching khác được xử lý tại đây. Sau khi ovs-vswitchd xác định làm sao để xử lý gói tin, nó gửi trả gói tin lại cho datapath cùng với yêu cầu xử lý. Đồng thời, vswitchd cũng yêu cầu datapath cache lại flow để xử lý các gói tin tương tự sau đó.

## 4.Các công cụ chính tương tác với Open vSwitch

  ![alt text](../image/ovs-tools.jpg)

 - ovs-vsctl: tiện ích chính sử dụng để quản lý các switch, nó tương tác với ovsdb-server để lưu cấu hình vào database của Open vSwitch. ovs-vsctl thực hiện truy vấn và áp dụng các thay đổi vào database tùy thuộc vào lệnh ta thực hiện. ovsdb-server sẽ nói chuyện với ovs-vswitchd qua giao thức OVSDB. Sau đó, nếu ovs-vsctl áp dụng bất kì thay đổi nào thì mặc định nó sẽ đợi ovs-vswitchd kết thúc việc tái cấu hình lại switch.

 - ovs-appctl: cũng là công cụ để quản lý ovs-vswitchd bênh cạnh ovs-vsctl, nó gửi một số command nội bộ tới ovs-vswitchd để thay đổi một số cấu hình và in ra phản hồi từ ovs-vswitchd. ovs-vswitchd đồng thời cũng lưu lại các cấu hình này vào database bằng việc tương tác với ovsdb-server thông qua Unix domain socket.

 - ovs-dpctl: đôi khi ta cần quản lý dapapath trong kernel trực tiếp mà thậm chí ovsdb-server không chạy, ta có thể sử dụng ovs-dpctl tương tác với ovs-vswitchd để quản lý datapath trong kernelspace trực tiếp mà không cần database.

 - ovsdb-client và ovsdb-tool: khi cần nói chuyện với ovsdb-server để thực hiện một số thao tác với database, ta sử dụng ovsdb-client, hoặc nếu muốn xử lý database trực tiếp không thông qua ovsdb-server thì sử dụng ovsdb-tool.

 - ovs-ofctl và sFlowTrend: Open vSwitch có thể được quản trị và giám sát bởi một remote controller. Điều này lý giải tại sao ta có thể định nghĩa mạng bằng phần mềm (hay Open vSwitch hỗ trợ SDN). Cụ thể hơn, sFlow là giao thức dể lấy mẫu gói tin và giám sát, trong khi OpenFlow là giao thức để quản lý flow table của switch, bridge hoặc device. Open vSwitch hỗ trợ cả OpenFlow và sFlow. Với ovs-ofctl, ta có thể sử dụng OpenFlow để kết nối với switch và thực hiện giám sát và quản trị từ xa. Trong khi đó sFlowTrend không phải là thành phần trong Open vSwitch packet mà là phần mềm độc lập hỗ trợ giám sát sử dụng sFlow.


## 5. SDN (Software Defined Network)

 - Data plane: xử lý và phân phối gói tin  căn cứ theo trạng thái chuyển tiếp cục bộ trên chuyển mạch (bảng chuyển tiếp). Trạng thái chuyển tiếp + header gói tin à quyết định chuyển tiếp, lọc, lưu trữ và lập lịch

 - Control plane: tính toán duy trì, cập nhật bảng chuyển tiếp cho chuyển mạch để data plan hoạt động được hiệu quả, xác định cách chuyển tiếp các gói tin, định tuyến, traffic engineering, phát hiện và phục hồi sự cố/lỗi ... 

 - Mạng SDN là gì: Một mạng mà trong đó control plan được tách khỏi data plan về mặt vật lý, i.e. không cùng trên một thiết bị. Chức năng control plan của router truyền thống được chuyển đến một chương trình tập trung Software	Defined	Network	(SDN). Chương trình tập trung điều khiển một số thiết bị chuyển tiếp đóng vai trò switch

   ![alt text](../image/SDN.png)


 - Openflow: là một giao thức giao tiếp giữa controller và switch, OpenFlow cho phép Controller chỉ định đường đi các gói tin qua mạng các chuyển mạch 

 - OpenFlow cho phép controller quản trị các bảng chuyển tiếp của các switch ở xa bằng các lệnh thêm, sửa hoặc loại bỏ các luật xử lý gói tin.

 - Openflow sử dụng TCP để đóng gói các gói tin Openflow. Trao đổi giữa switch và controller được vận chuyển bởi TCP, switch và controller không cần nối trực tiếp với nhau. Controller thường dùng cổng TCP 6653 hoặc 6633 để chờ các yêu cầu kết nối từ switch.
 
 - Chuyển mạch SDN: 

   ![alt text](../image/SDN2.png)


    + Flow table: định nghĩa cách xử lý đối với mỗi nhóm gói tin bằng luật: Gói tin thỏa mãn điều kiện X thì được xử lý theo cách Y. 

    + Packet processing: Là quá trình thực hiện chuyển tiếp gói tin theo định nghĩa trong bảng Flow table, Nếu không tìm được flow phù 
      hợp gói tin được chuyển lên cho Controller xử lý tiếp.

    + Switch giao tiếp với controller nhờ tầng API theo giao thức Openflow.


 - Flow table: Mỗi flow table gồm nhiều flow entry, Mỗi flow entry  định nghĩa một luật xử lý gồm <Match, Action>:

     + Match fields: Là tập hợp các điều kiện (giống như bộ lọc) dùng để xác định xem gói tin đến có khớp (match) với một flow rule hay không.

     + Là tập hợp các hành động sẽ được thực hiện nếu gói tin phù hợp với điều kiện match.

       Một số ví dụ về hành động:

       Gửi gói tin đến một cổng cụ thể (output)

       Chuyển tiếp đến controller (output:controller)

       Ghi log

       Drop gói tin (không làm gì cả)

       Sửa đổi header (ví dụ: đổi MAC, IP,...)

   
   






  
